import { BoardIdentifier, BoardsConfig, Defined, DetectedPort, DetectedPorts, Port, PortIdentifier } from './api';
/**
 * Representation of a detected port with an optional board.
 */
export interface BoardsListItem {
    readonly port: Port;
    readonly board?: BoardIdentifier;
}
/**
 * Representation of a detected port with multiple discovered boards on the same port. For example Arduino Nano ESP32 from `esp32:esp32:nano_nora` and `arduino:esp32:nano_nora`.
 * If multiple boards are detected, but the board names are the same, the `board` will be the `first` element of the `boards` array.
 * If multiple boards are detected, but the board names are not identical, the `board` will be missing.
 */
export interface MultiBoardsBoardsListItem extends BoardsListItem {
    readonly boards: readonly BoardIdentifier[];
}
export declare function isMultiBoardsBoardsListItem(arg: unknown): arg is MultiBoardsBoardsListItem;
/**
 * Base inferred board list item type.
 * The the type of the inferred board can be:
 *   - manually specified board for a detected port where no boards were discovered,
 *   - the board has been overridden for detected port discovered board pair.
 */
export type InferredBoardsListItem = ManuallySelectedBoardsListItem | BoardOverriddenBoardsListItem;
/**
 * No boards have been discovered for a detected port, it has been manually selected by the user.
 */
export interface ManuallySelectedBoardsListItem extends BoardsListItem {
    readonly inferredBoard: BoardIdentifier;
    readonly type: 'manually-selected';
}
/**
 * One or more boards have been discovered for a detected port, but the board has been overridden by a manual action.
 */
export interface BoardOverriddenBoardsListItem extends BoardsListItem {
    readonly inferredBoard: BoardIdentifier;
    readonly board: BoardIdentifier;
    readonly type: 'board-overridden';
}
export declare function isBoardsListItem(arg: unknown): arg is BoardsListItem;
export interface BoardsListItemWithBoard extends BoardsListItem {
    readonly board: BoardIdentifier;
}
export declare function getInferredBoardOrBoard(item: BoardsListItem): BoardIdentifier | undefined;
export declare function isInferredBoardsListItem(arg: unknown): arg is InferredBoardsListItem;
/**
 * Stores historical info about boards manually specified for detected boards. The key are generated with `Port#keyOf`.
 */
export type BoardsListHistory = Readonly<Record<string, BoardIdentifier>>;
/**
 * What is shown in the UI for the entire board list.
 */
export interface BoardsListLabels {
    readonly boardLabel: string;
    readonly portProtocol: string | undefined;
    readonly tooltip: string;
    /**
     * The client's board+port selection matches with one of the board list items.
     */
    readonly selected: boolean;
}
/**
 * What is show in the UI for a particular board with all its refinements, fallbacks, and tooltips.
 */
export interface BoardsListItemLabels {
    readonly boardLabel: string;
    readonly boardLabelWithFqbn: string;
    readonly portLabel: string;
    readonly portProtocol: string;
    readonly tooltip: string;
}
export interface BoardsListItemUI extends BoardsListItem {
    readonly labels: BoardsListItemLabels;
    readonly defaultAction: BoardsListItemAction;
    readonly otherActions: Readonly<{
        edit?: EditBoardsConfigAction;
        revert?: SelectBoardsConfigAction;
    }>;
}
/**
 * A list of boards discovered by the Arduino CLI. With the `board list --watch` gRPC equivalent command,
 * the CLI provides a `1..*` mapping between a port and the matching boards list. This type inverts the mapping
 * and makes a `1..1` association between a board identifier and the port it belongs to.
 */
export interface BoardsList {
    readonly labels: BoardsListLabels;
    /**
     * All detected ports with zero to many boards and optional inferred information based on historical selection/usage.
     */
    readonly items: readonly BoardsListItemUI[];
    /**
     * A snapshot of the board and port configuration this board list has been initialized with.
     */
    readonly boardsConfig: Readonly<BoardsConfig>;
    /**
     * Index of the board+port item that is currently "selected". A board list item is selected, if matches the board+port combination of `boardsConfig`.
     */
    readonly selectedIndex: number;
    /**
     * Contains all the following board+port pairs:
     *  - one discovered board on a detected board (`1`),
     *  - manually selected or overridden board for a detected port (`1`),
     *  - multiple discovered boards on detected port (`1..*`)
     */
    readonly boards: readonly BoardsListItemWithBoard[];
    /**
     * If `predicate` is not defined, no ports are filtered.
     */
    ports(predicate?: (detectedPort: DetectedPort) => boolean): readonly DetectedPort[] & Readonly<{
        matchingIndex: number;
    }>;
    /**
     * Sugar for `#ports` with additional grouping based on the port `protocol`.
     */
    portsGroupedByProtocol(): Readonly<Record<'serial' | 'network' | string, ReturnType<BoardsList['ports']>>>;
    /**
     * For dumping the current state of board list for debugging purposes.
     */
    toString(): string;
}
export type SelectBoardsConfigActionParams = Readonly<Defined<BoardsConfig>>;
export interface SelectBoardsConfigAction {
    readonly type: 'select-boards-config';
    readonly params: SelectBoardsConfigActionParams;
}
export interface EditBoardsConfigActionParams {
    readonly portToSelect?: PortIdentifier;
    readonly boardToSelect?: BoardIdentifier;
    readonly query?: string;
    readonly searchSet?: readonly BoardIdentifier[];
}
export interface EditBoardsConfigAction {
    readonly type: 'edit-boards-config';
    readonly params: EditBoardsConfigActionParams;
}
export type BoardsListItemAction = SelectBoardsConfigAction | EditBoardsConfigAction;
export declare function createBoardsList(detectedPorts: DetectedPorts, boardsConfig?: Readonly<BoardsConfig>, history?: BoardsListHistory): BoardsList;
/**
 * (non-API)
 */
export declare const __tests: {
    nls: {
        readonly unconfirmedBoard: "Unconfirmed board";
        readonly selectBoard: "Select Board";
        readonly notConnected: "[not connected]";
        readonly unknown: "Unknown";
    };
};
//# sourceMappingURL=boardsList.d.ts.map