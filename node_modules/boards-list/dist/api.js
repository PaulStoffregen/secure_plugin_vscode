"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.boardIdentifierLabel = exports.portProtocolComparator = exports.portIdentifierEquals = exports.isDefinedBoardsConfig = exports.findMatchingPortIndex = exports.isPort = exports.emptyBoardsConfig = exports.boardIdentifierEquals = exports.boardIdentifierComparator = exports.isBoardIdentifier = exports.isPortIdentifier = exports.createPortKey = void 0;
const fqbn_1 = require("fqbn");
const natural_compare_1 = __importDefault(require("natural-compare"));
/**
 * Key is the combination of address and protocol formatted like `'arduino+${protocol}://${address}'` used to uniquely identify a port.
 */
function createPortKey(port) {
    if (isPortIdentifier(port)) {
        return `arduino+${port.protocol}://${port.address}`;
    }
    return createPortKey(port.port);
}
exports.createPortKey = createPortKey;
function isPortIdentifier(arg) {
    return (Boolean(arg) &&
        typeof arg === 'object' &&
        arg.protocol !== undefined &&
        typeof arg.protocol === 'string' &&
        arg.address !== undefined &&
        typeof arg.address === 'string');
}
exports.isPortIdentifier = isPortIdentifier;
function isBoardIdentifier(arg) {
    return (Boolean(arg) &&
        typeof arg === 'object' &&
        arg.name !== undefined &&
        typeof arg.name === 'string' &&
        (arg.fqbn === undefined ||
            (arg.fqbn !== undefined &&
                typeof arg.fqbn === 'string')));
}
exports.isBoardIdentifier = isBoardIdentifier;
/**
 * See `boardsListItemComparator`.
 */
function boardIdentifierComparator(left, right) {
    if (!left) {
        return right ? 1 : 0;
    }
    if (!right) {
        return -1;
    }
    const leftVendor = left.fqbn ? new fqbn_1.FQBN(left.fqbn).vendor : undefined;
    const rightVendor = right.fqbn ? new fqbn_1.FQBN(right.fqbn).vendor : undefined;
    if (leftVendor === 'arduino' && rightVendor !== 'arduino') {
        return -1;
    }
    if (leftVendor !== 'arduino' && rightVendor === 'arduino') {
        return 1;
    }
    return (0, natural_compare_1.default)(left.name, right.name);
}
exports.boardIdentifierComparator = boardIdentifierComparator;
/**
 * @param options if `looseFqbn` is `true`, FQBN config options are ignored. Hence, `{ name: 'x', fqbn: 'a:b:c:o1=v1 }` equals `{ name: 'y', fqbn: 'a:b:c' }`. It's `true` by default.
 */
function boardIdentifierEquals(left, right, options = { looseFqbn: true }) {
    if (!left) {
        return !right;
    }
    if (!right) {
        return !left;
    }
    if ((left.fqbn && !right.fqbn) || (!left.fqbn && right.fqbn)) {
        // This can be very tricky when comparing boards
        // the CLI's board search returns with falsy FQBN when the platform is not installed
        // the CLI's board list returns with the full FQBN (for detected boards) even if the platform is not installed
        // when there are multiple boards with the same name (Arduino Nano RP2040) from different platforms (Mbed Nano OS vs. the deprecated global Mbed OS)
        // maybe add some 3rd party platform overhead (https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json)
        // and it will get very tricky when comparing a board which has a FQBN and which does not.
        return false; // TODO: This a strict now. Maybe compare name in the future.
    }
    if (left.fqbn && right.fqbn) {
        const leftFqbn = options.looseFqbn
            ? new fqbn_1.FQBN(left.fqbn).toString(true)
            : left.fqbn;
        const rightFqbn = options.looseFqbn
            ? new fqbn_1.FQBN(right.fqbn).toString(true)
            : right.fqbn;
        return leftFqbn === rightFqbn;
    }
    // No more Genuino hack.
    // https://github.com/arduino/arduino-ide/blob/f6a43254f5c416a2e4fa888875358336b42dd4d5/arduino-ide-extension/src/common/protocol/boards-service.ts#L572-L581
    return left.name === right.name;
}
exports.boardIdentifierEquals = boardIdentifierEquals;
/**
 * Creates a new board config object with `undefined` properties.
 */
function emptyBoardsConfig() {
    return {
        selectedBoard: undefined,
        selectedPort: undefined,
    };
}
exports.emptyBoardsConfig = emptyBoardsConfig;
function isPort(arg) {
    return (isPortIdentifier(arg) &&
        arg.label !== null &&
        typeof arg.label === 'string' &&
        arg.protocolLabel !== undefined &&
        typeof arg.protocolLabel === 'string' &&
        (arg.hardwareId === undefined ||
            typeof arg.hardwareId === 'string') &&
        (arg.properties === undefined ||
            typeof arg.properties === 'object'));
}
exports.isPort = isPort;
function findMatchingPortIndex(toFind, ports) {
    if (!toFind) {
        return -1;
    }
    const toFindPortKey = createPortKey(toFind);
    return ports.findIndex((port) => createPortKey(port) === toFindPortKey);
}
exports.findMatchingPortIndex = findMatchingPortIndex;
function isDefinedBoardsConfig(boardsConfig) {
    if (!boardsConfig) {
        return false;
    }
    return (boardsConfig.selectedBoard !== undefined &&
        boardsConfig.selectedPort !== undefined);
}
exports.isDefinedBoardsConfig = isDefinedBoardsConfig;
function portIdentifierEquals(left, right) {
    if (!left) {
        return !right;
    }
    if (!right) {
        return !left;
    }
    return left.protocol === right.protocol && left.address === right.address;
}
exports.portIdentifierEquals = portIdentifierEquals;
// the smaller the number, the higher the priority
const portProtocolPriorities = {
    serial: 0,
    network: 1,
};
/**
 * See `boardsListItemComparator`.
 */
function portProtocolComparator(left, right) {
    const leftPriority = portProtocolPriorities[left.protocol] ?? Number.MAX_SAFE_INTEGER;
    const rightPriority = portProtocolPriorities[right.protocol] ?? Number.MAX_SAFE_INTEGER;
    return leftPriority - rightPriority;
}
exports.portProtocolComparator = portProtocolComparator;
function boardIdentifierLabel(board, showFqbn = true) {
    const { name, fqbn } = board;
    let label = name;
    if (fqbn && showFqbn) {
        label += ` (${fqbn})`;
    }
    return label;
}
exports.boardIdentifierLabel = boardIdentifierLabel;
//# sourceMappingURL=api.js.map