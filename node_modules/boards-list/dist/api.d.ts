import type { Board as ApiBoard, Port as ApiPort } from 'ardunno-cli';
/**
 * Lightweight information to identify a board:
 *  - The board's `name` is to provide a fallback for the UI. Preferably do not use this property for any sophisticated logic and board comparison. It must never participate in the board's identification.
 *  - The FQBN might contain boards config options if selected from the discovered ports (see [arduino/arduino-ide#1588](https://github.com/arduino/arduino-ide/issues/1588)).
 */
export type BoardIdentifier = Nullable<ApiBoard, 'fqbn'>;
/**
 * Key is the combination of address and protocol formatted like `'arduino+${protocol}://${address}'` used to uniquely identify a port.
 */
export declare function createPortKey(port: PortIdentifier | Port | DetectedPort): string;
export declare function isPortIdentifier(arg: unknown): arg is PortIdentifier;
export declare function isBoardIdentifier(arg: unknown): arg is BoardIdentifier;
/**
 * See `boardsListItemComparator`.
 */
export declare function boardIdentifierComparator(left: BoardIdentifier | undefined, right: BoardIdentifier | undefined): number;
/**
 * @param options if `looseFqbn` is `true`, FQBN config options are ignored. Hence, `{ name: 'x', fqbn: 'a:b:c:o1=v1 }` equals `{ name: 'y', fqbn: 'a:b:c' }`. It's `true` by default.
 */
export declare function boardIdentifierEquals(left: BoardIdentifier | undefined, right: BoardIdentifier | undefined, options?: {
    looseFqbn: boolean;
}): boolean;
export interface BoardsConfig {
    selectedBoard: BoardIdentifier | undefined;
    selectedPort: PortIdentifier | undefined;
}
/**
 * Creates a new board config object with `undefined` properties.
 */
export declare function emptyBoardsConfig(): BoardsConfig;
export type Port = Optional<ApiPort, 'hardwareId' | 'properties'>;
export declare function isPort(arg: unknown): arg is Port;
export interface DetectedPort {
    readonly port: Port;
    readonly boards?: BoardIdentifier[];
}
/**
 * The closest representation what the Arduino CLI detects with the `board list --watch` gRPC equivalent.
 * The keys are unique identifiers generated from the port object (via `Port#keyOf`).
 * The values are the detected ports with all their optional `properties` and matching board list.
 */
export type DetectedPorts = Readonly<Record<string, DetectedPort>>;
export declare function findMatchingPortIndex(toFind: PortIdentifier | undefined, ports: readonly DetectedPort[] | readonly Port[]): number;
export declare function isDefinedBoardsConfig(boardsConfig: BoardsConfig | undefined): boardsConfig is Defined<BoardsConfig>;
/**
 * Bare minimum information to identify port.
 */
export type PortIdentifier = Readonly<Pick<ApiPort, 'protocol' | 'address'>>;
export declare function portIdentifierEquals(left: PortIdentifier | undefined, right: PortIdentifier | undefined): boolean;
/**
 * See `boardsListItemComparator`.
 */
export declare function portProtocolComparator(left: PortIdentifier, right: PortIdentifier): number;
export declare function boardIdentifierLabel(board: BoardIdentifier, showFqbn?: boolean): string;
export type Defined<T> = {
    [P in keyof T]: NonNullable<T[P]>;
};
export type Mutable<T> = {
    -readonly [P in keyof T]: T[P];
};
type Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>;
type OrUndefined<T> = {
    [P in keyof T]: T[P] | undefined;
};
type Nullable<T, K extends keyof T> = Pick<OrUndefined<T>, K> & Omit<T, K>;
export {};
//# sourceMappingURL=api.d.ts.map